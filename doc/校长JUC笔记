## juc工具类

### CoutDownLatch

CoutDownLatch：类似于.join()方法，等待其他线程完成后才会执行下面的代码。await();阻塞当前线程，countDown(); 对计数器递减1操作，当计数器为0时，会去唤醒阻塞线程。



示例代码：

```java
public class CyclicBarrierTest {
    /**
     * 使用 CountDownLatch
     */
    static CountDownLatch cd = new CountDownLatch(2);
    static int[] array = new int[2];
    public static void main(String[] args) throws InterruptedException {
        Thread A = new Thread(() -> {
            //计算 3*5
            array[0] = 3*5;
            cd.countDown();
        });
        Thread B = new Thread(() -> {
            //计算 10+2
            array[1] = 10+2;
            cd.countDown();
        });
        A.start();
        B.start();
        cd.await();
        System.out.println(array[0] + array[1]); //27
    }

}
```



### CyclicBarrier

CyclicBarrier：可循环的屏障，当线程执行完后会被阻塞在屏障点，等待所有线程都到达屏障后才会继续往下执行。默认构造方法入参代表拦截线程数量。每个线程的await();方法告诉cyclicBarrier我已到达屏障，然后当前线程阻塞。

```java
public class CyclicBarrierTest1 {
    /**
     * 使用 CyclicBarrier
     */
    static CyclicBarrier cb = new CyclicBarrier(3);
    static int[] array = new int[2];
    public static void main(String[] args) throws InterruptedException, BrokenBarrierException {
        Thread A = new Thread(() -> {
            //计算 3*5
            array[0] = 3*5;
            try {
                cb.await();
            } catch (InterruptedException e) {
                e.printStackTrace();
            } catch (BrokenBarrierException e) {
                e.printStackTrace();
            }
        });
        Thread B = new Thread(() -> {
            //计算 10+2
            array[1] = 10+2;
            try {
                cb.await();
            } catch (InterruptedException e) {
                e.printStackTrace();
            } catch (BrokenBarrierException e) {
                e.printStackTrace();
            }
        });
        A.start();
        B.start();
        cb.await();
        System.out.println(array[0] + array[1]);

        // 对于这个场景，建议使用CountdownLatch。因为CountdownLatch里边的参数直接写的是2，就是进行2次倒计时，我们的main函数
        //调用的await。就是告诉我们main线程在等待其他两个线程执行完毕。
        // 然而，对于 CyclicBarrier 这种实现形式，main函数和其他两个线程都被阻塞到了一个地方。此处main函数到达了屏障之后
        //挂起自己，等待其他两个线程达到屏障之后才开始执行。

        // CountdownLatch 针对业务完成之后放行；（赛跑的过程里边的到达终点。）
        // CyclicBarrier 针对的是所有的线程在统一的屏障集合之后开始 （赛跑过程里边的起跑线。）
    }

}
```



CyclicBarrier入参为（parties ——在障碍被触发之前必须调用await的线程数 barrierAction – 当障碍被触发时执行的命令，如果没有动作则为null）

```java

public class CyclicBarrierTest2 implements Runnable{
    /**
     * 使用 CyclicBarrier
     */
    CyclicBarrier cb = new CyclicBarrier(2,this);
    int[] array = new int[2];
    public void calcute(){
        Thread A = new Thread(() -> {
            //计算 3*5
            array[0] = 3*5;
            try {
                cb.await();
            } catch (InterruptedException e) {
                e.printStackTrace();
            } catch (BrokenBarrierException e) {
                e.printStackTrace();
            }
        });
        Thread B = new Thread(() -> {
            //计算 10+2
            array[1] = 10+2;
            try {
                cb.await();
            } catch (InterruptedException e) {
                e.printStackTrace();
            } catch (BrokenBarrierException e) {
                e.printStackTrace();
            }
        });
        A.start();
        B.start();
    }

    @Override
    public void run() {
        System.out.println(array[0] + array[1]);
    }

    public static void main(String[] args) {
        CyclicBarrierTest2 cyclicBarrierTest2 = new CyclicBarrierTest2();
        cyclicBarrierTest2.calcute();
    }

    // 我们的cycbarrier 能够支持 一个 runnable的 action去做后续的数据的操作。能够适用于更加复杂的
    // 场景。
}

```



### Semaphore（信号量）

Semaphore（信号量）是用来控制访问线程的最大数量，通过协调各个线程，以保证合理的使用公共资源。

Semaphore可以用于流量控制，特别是公共资源有限的场景，如数据库。

```java
public class SemaphoreTest {
    static Semaphore s = new Semaphore(10);
    public static void main(String[] args) {
        for(int i = 0 ; i < 100; i++) {
            Thread a = new Thread(() -> {
                try {
                    s.acquire();
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
                System.out.println("链接db，保存数据。");
                s.release();
            });
            a.start();
        }
    }
}

```

### Exchanger 线程间数据交换

Exchanger（交换者）是一个用于两个

线程间协作的工具类。Exchanger用于进行线程间的数据交换。它提供一个同步点，在这个同步点，两个线程可以交换彼此的数据。这两个线程通过exchange方法交换数据，如果第一个线程先执行exchange()方法，它会一直等待第二个线程也执行exchange方法，当两个线程都到达同步点时，这两个线程就可以交换数据，将本线程生产出来的数据传递给对方

```java
public class ExchangerTest {
    static Exchanger<String> exchanger = new Exchanger<>();
    public static void main(String[] args) {
        Thread A = new Thread(() -> {
            String a = "aa";
            String b = "";
            try {
                b = exchanger.exchange(a);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            System.out.println("线程A： " + a + b);
        });
        Thread B = new Thread(() -> {
            String b = "bb";
            String a = "";
            try {
               a = exchanger.exchange(b);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            System.out.println("线程B： " + b  + a);
        });
        A.start();
        B.start();
    }
}

```



## 线程安全的队列

### ConcurrentLinkedQueue

ConcurrentLinkedQueue是基于链表的无界线程安全队列FIOI，采用CAS算法来实现



### 阻塞队列（BlockingQueue）

（1）、支持阻塞插入：即队列满了之后，将会阻塞插入元素的线程，直至队列不满。

（2）、支持阻塞的移除方法：即队列为空时，等待队列不为空。

| 方法/处理方式 | 抛出异常  | 返回特殊值 | 一直阻塞 | 超时退出            |
| ------------- | --------- | ---------- | -------- | ------------------- |
| 插入方法      | add(e)    | Offer(e)   | Put(e)   | Offer(e, time,unit) |
| 移除方法      | Remove()  | Poll()     | take()   | poll(time, unit)    |
| 检查方法      | element() | peek()     | 不可用   | 不可用              |



1. **ArrayBlockingQueue 与 LinkedBlockingQueue**

   ArrayBlockingQueue是一个用数组实现的**有界阻塞队列**。此队列按照**先进先出（FIFO）**的原则对元素进行排序。

   LinkedBlockingQueue是一个用**链表**实现的**有界阻塞队列**。此队列的默认和最大长度为Integer.MAX_VALUE。此队列按照**先进先出**的原则对元素进行

2. **PriorityBlockingQueue 和 DelayQueue**

   **PriorityBlockingQueue**：

   PriorityBlockingQueue是一个支持优先级的无界阻塞队列。默认情况下元素采取自然顺序升序排列。也可以自定义类实现compareTo()方法来指定元素排序规则，或者初始化PriorityBlockingQueue时，指定构造参数Comparator来对元素进行排序。需要注意的是不能保证同优先级元素的顺序。

   **DelayQueue：**

   DelayQueue是一个**支持延时**获取元素的无界阻塞队列。队列使用**PriorityQueue**来实现。队列中的元素必须实现**Delayed接口**，在创建元素时可以指定多久才能从队列中获取当前元素。只有在延迟期满时才能从队列中提取元素。

   **DelayQueue非常有用，可以将DelayQueue运用在以下应用场景。**

   **缓存系统的设计****(****很少有公司自己设计大型缓存：****Redis****，****ehcache****，****mcache****)**：可以用DelayQueue保存缓存元素的有效期，使用一个线程循环查询DelayQueue，一旦能从DelayQueue中获取元素时，表示缓存有效期到了。

   **定时任务调度**：使用DelayQueue保存当天将会执行的任务和执行时间，一旦从DelayQueue中获取到任务就开始执行，比如TimerQueue就是使用DelayQueue实现的。

3. **SynchronousQueue**

   SynchronousQueue**是一个不存储元素的阻塞队列**。每一个put操作必须等待一个take操作，否则不能继续添加元素。它支持公平访问队列。**默认情况下线程采用非公平性策略访问队列**。使用以下构造方法可以创建公平性访问的SynchronousQueue，如果设置为true，则等待的线程会采用先进先出的顺序访问队列。

   1. 不存储数据的队列，阻塞队列。使用场景，适合短期的小并发场景，且数据处理相当快速。硬要说点好处：首先他们有缓冲容量，那么他可以避免在服务器宕机的情况下，从queue的角度来说，没有数据丢失这么一说。 他类似于一个**传球手**，中间没有任何介质阻碍。如果单纯的进行数据的传递且生产的线程与消费的线程生产时间和消费时间都比较匹配的话，他的性能能够很高。

   2. cachedThreadPool 里边使用的就是syncQueue。cachedThreadPool的使用场景就是处理快速的短期的小并发场景。cachedThreadPool 是没有核心线程数，完全依赖max线程数，直接依赖操作系统创建线程，如果是短期的小并发，在线程达到 keep live 时间以后，可以自行销毁。



[22]:2

